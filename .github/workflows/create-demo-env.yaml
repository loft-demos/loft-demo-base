name: create-demo-environment

# on merge to main from pull request (recommended)
on:
  workflow_dispatch:
    inputs:
      vcluster-name:
        description: "Name of vCluster to be used as demo domain prefix"
        required: true
      template-version:
        description: "Virtual Cluster Template version to use"
        required: true
        default: "4.0.0"
      logo:
        description: "Company logo URL to override UI"
        default: "https://www.vcluster.com/pro/docs/media/vclusterpro_orange.svg"
      cluster:
        description: "Host cluster for vCluster"
        type: choice
        default: "worker-cluster-na"
        options: 
        - worker-cluster-na
        - worker-cluster-eu
      product:
        description: "Loft product to demo"
        type: choice
        default: "vcluster-pro"
        options: 
        - vcluster-pro
        - loft
        - devpod-pro
      create-dev-cluster:
        type: boolean
        description: 'Create dev vCluster to use as fake cluster'
      centralized-admission-control:
        type: boolean
        description: 'Enable Centralized Admission Control demo'
        default: false
      argocd-app:
        type: boolean
        description: 'Include Argo CD Demo App'
        default: false
env:
  LOFT_CLI_VERSION:  'v3.4.6'
  VCLUSTER_NAME: ${{ inputs.vcluster-name }}
  DEV_VCLUSTER_NAME: ${{ inputs.vcluster-name }}-dev
  CLUSTER: ${{ inputs.cluster }}
  TEMPLATE_VERSION: '${{ inputs.template-version }}'
  PRODUCT: ${{ inputs.product }}
  LOGO: ${{ inputs.logo }}
  REPO_NAME: 'hello-app-${{ inputs.vcluster-name }}'
  ARGOCD_APP: ${{ inputs.argocd-app || false }}
  CREATE_DEV_CLUSTER: ${{ inputs.create-dev-cluster || false }}

jobs:
  create-demo-env:
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
    steps:
      - id: checkout
        uses: actions/checkout@v4
      
      - id: set-domain-login
        run: |
          curl -L -o vcluster "https://github.com/loft-sh/vcluster/releases/download/v0.20.0-beta.12/vcluster-linux-amd64" && sudo install -c -m 0755 vcluster /usr/local/bin && rm -f vcluster
          vcluster login ${{ secrets.LOFT_URL }} --access-key ${{ secrets.LOFT_SALES_DEMO_ACCESS_KEY }}
          vcluster use driver platform
          echo $CREATE_DEV_CLUSTER
          if [ "$CLUSTER" == "worker-cluster-na" ]
          then
            echo "BASE_DOMAIN=$VCLUSTER_NAME.us.demo.dev" >> $GITHUB_ENV
          else
            echo "BASE_DOMAIN=$VCLUSTER_NAME.eu.demo.dev" >> $GITHUB_ENV
          fi

      - id: create-dev-cluster
        if: ${{ inputs.create-dev-cluster }}
        run: |
          echo $DEV_VCLUSTER_NAME
          vcluster create $DEV_VCLUSTER_NAME --project sales-demos --recreate \
            --template demo-dev-cluster \
            --cluster $CLUSTER

      - id: create-demo-vcluster
        run: |
          vcluster create $VCLUSTER_NAME --project sales-demos --recreate \
            --template loft-demo --version $TEMPLATE_VERSION \
            --cluster $CLUSTER \
            --set-param loftProduct=$PRODUCT \
            --set-param uiLogoURL=$LOGO
          
          sed -i "s|REPLACE_BASE_DOMAIN|$BASE_DOMAIN|g" loft/projects.yaml
          sed -i "s|REPLACE_BASE_DOMAIN|$BASE_DOMAIN|g" loft/apps.yaml
          sed -i "s|LOFT_DEMO_GHCR_LOGIN_SECRET|${{ secrets.LOFT_DEMO_GHCR_LOGIN_SECRET }}|g" loft/sharedsecrets.yaml

          yq e -i ".spec.key = \"${{ secrets.LOFT_DEMO_ENV_ACCESS_KEY }}\"" loft/accesskey.yaml

          kubectl get pods -A
          
          while ! kubectl get project.management.loft.sh default; do
            echo "Waiting for loft default project...";
            sleep 3; 
          done

          while ! kubectl get app.management.loft.sh argocd; do
            echo "Waiting for argo cd applicationset crd...";
            sleep 3; 
          done
          
          kubectl delete VirtualClusterTemplate vcluster-pro-template --wait
          kubectl apply -f ./loft
          kubectl apply -f ./loft-p-api-framework
          
          while ! kubectl get configmap argocd-rbac-cm -n argocd; do
            echo "Waiting for argocd rbac configmap...";
            sleep 1; 
          done
          
          yq e -i ".data.githubAppID = \"${{ secrets.BASE64_LOFT_DEMOS_GITHUB_APP_ID }}\"" argocd/loft-demo-repo-cred.yaml
          yq e -i ".data.githubAppInstallationID = \"${{ secrets.BASE64_LOFT_DEMOS_GITHUB_APP_INSTALL_ID }}\"" argocd/loft-demo-repo-cred.yaml
          yq e -i ".data.githubAppPrivateKey = \"${{ secrets.BASE64_LOFT_DEMOS_GITHUB_APP_KEY }}\"" argocd/loft-demo-repo-cred.yaml
          more argocd/loft-demo-repo-cred.yaml
          kubectl apply -f argocd/loft-demo-repo-cred.yaml
          
          kubectl delete pod -l app.kubernetes.io/name=argocd-applicationset-controller -n argocd

      - id: create-argocd-app-sets
        run: |
          sed -i "s|REPO_NAME|$REPO_NAME|g" argocd/argocd-appset.yaml
          sed -i "s|LOFT_DOMAIN|$BASE_DOMAIN|g" argocd/argocd-appset.yaml
          kubectl apply -f argocd/argocd-appset.yaml
          sed -i "s|REPO_NAME|$REPO_NAME|g" argocd/argocd-cluster-appset.yaml
          sed -i "s|LOFT_DOMAIN|$BASE_DOMAIN|g" argocd/argocd-cluster-appset.yaml
          kubectl apply -f argocd/argocd-cluster-appset.yaml

      - id: create-argocd-app
        if: ${{ inputs.argocd-app }}
        run: |
          yq e -i ".metadata.name = \"$REPO_NAME\"" argocd/argocd-app.yaml
          yq e -i ".spec.source.repoURL = \"https://github.com/loft-demos/$REPO_NAME.git\"" argocd/argocd-app.yaml
          yq e -i ".spec.destination.namespace = \"$REPO_NAME\"" argocd/argocd-app.yaml
          kubectl apply -f argocd/argocd-app.yaml

          vcluster login https://$BASE_DOMAIN --access-key ${{ secrets.LOFT_DEMO_ENV_ACCESS_KEY }}
          vcluster use driver platform
          vcluster connect api-framework-qa --project api-framework
          kubectl create namespace $REPO_NAME --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret docker-registry ghcr-login-secret -n $REPO_NAME --docker-server=https://ghcr.io \
            --docker-username=km-demos --docker-password=${{ secrets.KM_MANAGE_PACKAGES_TOKEN }} --docker-email=km@kurtmadel.com

      - id: create-centralized-admission-control-demo
        if: ${{ inputs.centralized-admission-control }}
        run: |
          echo "enabling centralized-admission-control demo"
          helm repo add kyverno https://kyverno.github.io/kyverno/
          helm repo update
          helm upgrade --install kyverno kyverno/kyverno -n kyverno --create-namespace --version 3.1.4 --wait
          kubectl apply -f ./vcluster-centralized-admission-control

      - id: connect-dev-cluster
        if: ${{ inputs.create-dev-cluster }}
        run: |
          vcluster login ${{ secrets.LOFT_URL }} --access-key ${{ secrets.LOFT_SALES_DEMO_ACCESS_KEY }}
          vcluster connect $DEV_VCLUSTER_NAME
          vcluster login https://$BASE_DOMAIN --access-key ${{ secrets.LOFT_DEMO_ENV_ACCESS_KEY }}
          vcluster use driver platform
          vcluster platform add cluster dev-cluster --display-name "Dev Cluster" --helm-set=resources.requests.memory=2Gi
