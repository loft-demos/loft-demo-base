apiVersion: management.loft.sh/v1
kind: App
metadata:
  name: vcluster-platform-demo-configure-admins
spec:
  displayName: vCluster Platform Demo Configure Admins
  description: Configures SSO Groups that should get admin privileges
  owner:
    team: loft-admins
  config:
    chart: {}
    bash:
      script: >-
        kubectl wait --for condition=established --timeout=60s
        crd/teams.storage.loft.sh


        while ! kubectl get teams.storage.loft.sh loft-admins; do
          echo "Waiting for team...";
          sleep 1; 
        done


        cat <<EOF | kubectl apply -f -

        kind: Team

        apiVersion: storage.loft.sh/v1

        metadata:
          name: loft-admins
        spec:
          displayName: Global Admins
          description: All users in this team have full admin access to all clusters
          username: loftadmins
          groups:
            - loft:admins
            - Administration
            - Design
            - DevRel
            - Engineering
            - Marketing
            - Product
            - Sales
          clusterRoles:
            - name: loft-management-admin
          access:
            - name: loft-access
              verbs:
                - get
                - bind
              subresources:
                - clusters
              teams:
                - loft-admins
        EOF

        
        SECRET_NS="vcluster-platform"
        
        SECRET_NAME="demo-admin-access-key"
        
        TIMEOUT=60
        
        SLEEP=2
        
        end=$((SECONDS+TIMEOUT))

        echo "[INFO] Waiting for secret ${SECRET_NAME} in ns ${SECRET_NS} with populated accessKey..."
        
        ACCESS_KEY_B64=""
        
        while (( SECONDS < end )); do
        
          # Try to grab the field (may be empty or missing)
          
          ACCESS_KEY_B64=$(kubectl get secret "$SECRET_NAME" -n "$SECRET_NS" \
            -o jsonpath="{.data.accessKey}" 2>/dev/null || true)
        
          if [[ -n "$ACCESS_KEY_B64" ]]; then
          
            # decode it
            
            ACCESS_KEY=$(printf '%s' "$ACCESS_KEY_B64" | base64 -d)
            
            if [[ -n "$ACCESS_KEY" ]]; then
            
              echo "[INFO] Got accessKey (length=${#ACCESS_KEY})"
              
              break
              
            fi
            
          fi
        
          echo "[INFO] Still waiting..."
          
          sleep "$SLEEP"
          
        done
        
        echo "[INFO] Waiting until OwnedAccessKey can be created..."
        
        while (( SECONDS < end )); do
        
          if kubectl api-resources --api-group=management.loft.sh \
            | grep -q '^ownedaccesskeys'; then
            
            if kubectl auth can-i --quiet create ownedaccesskeys.management.loft.sh; then
            
              echo "[INFO] OwnedAccessKey is creatable."
              
              break
              
            fi
            
          fi
          
          sleep "$SLEEP"
          
        done

        echo "acess key before patch: $ACCESS_KEY"
        

        OUTPUT=$(cat <<EOF | kubectl apply -f -

        apiVersion: management.loft.sh/v1
        
        kind: OwnedAccessKey
        
        metadata:
          creationTimestamp: null
          name: "demo-env-admin-access-key"
        spec:
          displayName: "demo-env-admin-access-key"
          type: User
          team: loft-admins
          key: $ACCESS_KEY
        status: {}
        
        EOF
        
        )

        RESOURCE_NAME=$(echo "$OUTPUT" | awk '{print $1}' | cut -d'/' -f2)


        kubectl patch accesskey.storage.loft.sh $RESOURCE_NAME \
          --type='merge' \
          -p='{"spec":{"key":"'"$ACCESS_KEY"'"}}'

        ACCESS_KEY=$(kubectl get accesskey $RESOURCE_NAME  -o jsonpath="{.spec.key}")

        echo "acess key after patch: $ACCESS_KEY"

        kubectl annotate clusters loft-cluster domainPrefix={{
        .Values.loft.virtualClusterName }}

        kubectl annotate clusters loft-cluster domain={{
        .Values.loft.clusterAnnotations.domain }}
