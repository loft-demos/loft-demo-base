apiVersion: management.loft.sh/v1
kind: App
metadata:
  name: github-repo-argo-cd-webhooks
spec:
  displayName: GitHub Repo with Argo CD Webhooks
  owner:
    team: loft-admins
  config:
    chart: {}
    bash:
      script: >
        kubectl wait --for condition=established --timeout=60s
        crd/applicationsets.argoproj.io


        while ! kubectl get crd applicationsets.argoproj.io; do
          echo "Waiting for argo cd applicationset crd...";
          sleep 1; 
        done


        kubectl wait --for condition=established --timeout=60s
        crd/applicationsets.argoproj.io


        while ! kubectl get crd applicationsets.argoproj.io; do
          echo "Waiting for argo cd applicationset crd...";
          sleep 1; 
        done


        POD=$(kubectl get pod -n argocd -l
        app.kubernetes.io/component=applicationset-controller -o
        jsonpath="{.items[0].metadata.name}")

        kubectl delete pod -n argocd $POD

        while ! kubectl get secret ghcr-login-secret -n vcluster-platform; do
        
          echo "Waiting for ghcr-login-secret...";
          
          sleep 1; 
          
        done

        PULL_SECRET=$(kubectl get secret ghcr-login-secret -n vcluster-platform -o
        jsonpath="{.data['\.dockerconfigjson']}")

        # 1) Rollout completion for the StatefulSet (best)
        
        kubectl rollout status -n argocd statefulset/argocd-application-controller --timeout=300s
        
        # 2) And ensure at least one controller pod is Ready
        
        kubectl wait -n argocd --for=condition=Ready pod \
          -l app.kubernetes.io/name=argocd-application-controller \
          --timeout=300s
        
        # (Recommended) repo-server too, to avoid 8081 dial errors
        
        kubectl rollout status -n argocd deploy/argocd-repo-server --timeout=300s || true
        
        kubectl wait -n argocd --for=condition=Ready pod \
          -l app.kubernetes.io/name=argocd-repo-server \
          --timeout=300s

        # Wait until the Service has at least one endpoint on port 8081
        
        echo "Waiting for argocd-repo-server endpoints on :8081..."
        
        for i in {1..120}; do
        
          # count endpointslices with a matching port 8081
          
          EP_OK=$(kubectl -n argocd get endpointslices \
            -l kubernetes.io/service-name=argocd-repo-server \
            -o json | jq '[.items[]
              | .ports[]?
              | select((.port==8081) or (.name=="https" or .name=="grpc" or .name=="server") and (.port!=null))
            ] | length')
        
          # fallback if EndpointSlice API isnâ€™t available
          
          SVC_OK=$(kubectl -n argocd get endpoints argocd-repo-server -o json 2>/dev/null \
            | jq '[.subsets[]? | .ports[]? | select(.port==8081)] | length' 2>/dev/null || echo 0)
        
          if [ "${EP_OK:-0}" -gt 0 ] || [ "${SVC_OK:-0}" -gt 0 ]; then
          
            echo "Endpoints present."
            
            break
            
          fi
          
          sleep 2
          
          if [ $i -eq 120 ]; then
          
            echo "Timed out waiting for repo-server endpoints on :8081"; exit 1
            
          fi
          
        done

        cat <<EOF | kubectl apply -f -

        apiVersion: argoproj.io/v1alpha1

        kind: Application

        metadata:
          name: vcluster-gitops
          namespace: argocd
        spec:
          destination:
            server: https://kubernetes.default.svc
          project: default
          source:
            path: vcluster-gitops
            repoURL: https://github.com/loft-demos/{{ .Values.loft.virtualClusterName }}-app.git
            targetRevision: HEAD
            kustomize:
              patches:
                - target:
                    kind: SharedSecret
                    name: ghcr-login-secret
                  patch: |-
                    - op: replace
                      path: /spec/data/.dockerconfigjson
                      value: $PULL_SECRET
          syncPolicy:
            automated:
              prune: true
              selfHeal: true
            syncOptions:
            - CreateNamespace=true
            retry:
              limit: 14
              backoff:
                duration: 2s 
                factor: 2 
                maxDuration: 2m
        EOF
